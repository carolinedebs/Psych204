// To run this program, use the command: webppl test.wppl --require webppl-csv

var getResults = function() { 
	
	// Read in the ratings.csv to get a random user and the books that person has rated. 
	var user_id = ratings[JSON.stringify(randomInteger(30000))][1]; // Good to test: 21733, 35259, 5885, 23497
	display("User ID: " + user_id);
	var users_books = map(function(x) { if (x[1] === user_id) return x; }, ratings);
	var users_books = remove(undefined, users_books);
	var plucked = users_books[0];
	var users_books = remove(users_books[0], users_books);

	if (users_books.length > 7) {

		/* Read in the books_tags.csv to get the tag info on each of the books the user has rated */
		var user_books_only = map(function(x) { return x[0]; }, users_books);
		var each_book_tags = filter(function(x) {if (user_books_only.indexOf(x[0]) !== -1) return x;}, book_tags)
		var each_book_tags = remove(undefined, each_book_tags);
		var classics = filter(function(x) {if (x[1] === classics) return x;}, each_book_tags);
		var fantasy = filter(function(x) {if (x[1] === fantasy) return x;}, each_book_tags); 
		var fic = filter(function(x) {if (x[1] === fiction) return x;}, each_book_tags);
		var nfic = filter(function(x) {if (x[1] === non_fiction) return x;}, each_book_tags);
		var ya = filter(function(x) {if (x[1] === young_adult) return x;}, each_book_tags);
		var scifi = filter(function(x) {if (x[1] === science_fiction) return x;}, each_book_tags);
		var mystery = filter(function(x) {if (x[1] === mystery) return x;}, each_book_tags);
		var humor = filter(function(x) {if (x[1] === humor) return x;}, each_book_tags);
		// display("There are " + user_books_only.length + " books we will train on for User " + user_id );

		/* Get the genre preference of the user */
		var all = [classics.length, fantasy.length, fic.length, nfic.length, ya.length, scifi.length, mystery.length, humor.length];
		var all = sort(all, gt);
		var genrepref = -1;
		if (all[0] === classics.length) var genrepref = "classics"
		if (all[0] > 0 && all[0] === fantasy.length) var genrepref = "fantasy";
		if (all[0] > 0 && all[0] === fic.length) var genrepref = "fic";
		if (all[0] > 0 && all[0] === nfic.length) var genrepref = "nfic";
		if (all[0] > 0 && all[0] === ya.length) var genrepref = "ya";
		if (all[0] > 0 && all[0] === scifi.length) var genrepref = "scifi";
		if (all[0] > 0 && all[0] === mystery.length) var genrepref = "mystery";
		if (all[0] > 0 && all[0] === humor.length) var genrepref = "humor"; 
		
		/* Get the popularity rating of the user (popular books (500k+ ratings) / all books on shelf)  */ 
		var each_book = filter(function(x) {if (user_books_only.indexOf(x[0]) !== -1) return x;}, books);
		var each_book = filter(function(x) {if (x[13] > 500000) return x;}, each_book);
		var bandwagoner_ratio = each_book.length / user_books_only.length;
		// display(bandwagoner_ratio);

		/* Create a new user */ 
		var createUser = mem(function() {
		  var bandwagoner = bandwagoner_ratio;
		  var genrepreference = genrepref;
		  var user = {bandwagon: bandwagoner, genre: genrepreference};
		  return user;
		})

		/* Get popularity and genre of plucked book */ 
		var plucked_book = map(function(x) { return x[0]; }, plucked);
		var each_book_tags = filter(function(x) {if (plucked_book.indexOf(x[0]) !== -1) return x;}, book_tags)
		var classics = filter(function(x) {if (x[1] === classics) return x;}, each_book_tags);
		var fantasy = filter(function(x) {if (x[1] === fantasy) return x;}, each_book_tags); 
		var fic = filter(function(x) {if (x[1] === fiction) return x;}, each_book_tags);
		var nfic = filter(function(x) {if (x[1] === non_fiction) return x;}, each_book_tags);
		var ya = filter(function(x) {if (x[1] === young_adult) return x;}, each_book_tags);
		var scifi = filter(function(x) {if (x[1] === science_fiction) return x;}, each_book_tags);
		var mystery = filter(function(x) {if (x[1] === mystery) return x;}, each_book_tags);
		var humor = filter(function(x) {if (x[1] === humor) return x;}, each_book_tags);
		var all = [classics.length, fantasy.length, fic.length, nfic.length, ya.length, scifi.length, mystery.length, humor.length];
		var all = sort(all, gt);
		var genrepref = "";
		if (all[0] === classics.length) var genrepref = "classics"
		if (all[0] > 0 && all[0] === fantasy.length) var genrepref = "fantasy";
		if (all[0] > 0 && all[0] === fic.length) var genrepref = "fic";
		if (all[0] > 0 && all[0] === nfic.length) var genrepref = "nfic";
		if (all[0] > 0 && all[0] === ya.length) var genrepref = "ya";
		if (all[0] > 0 && all[0] === scifi.length) var genrepref = "scifi";
		if (all[0] > 0 && all[0] === mystery.length) var genrepref = "mystery";
		if (all[0] > 0 && all[0] === humor.length) var genrepref = "humor"; 
		var each_book = filter(function(x) {if (plucked.indexOf(x[0]) !== -1) return x;}, books);
		var each_book = filter(function(x) {if (x[13] > 500000) return x;}, each_book);

		var reads = function(book, newUser) {
		  var genreweight = (book.genre == newUser.genre)? 1 : 0;
		  var bandwagonweight = book.popular ? newUser.bandwagon : 0;
		  var p = 0.5 + (genreweight / 4) + (bandwagonweight / 4)
		  return flip(p);
		}

		var readBook = function() {
		  var newUser = createUser();
		  var bookgenre = genrepref;
		  var popularity = each_book.length;
		  var book = {genre: bookgenre, popular: popularity}; // Put data from real book here
		  return reads(book, newUser);
		}
		readBook();
	} else {
		getResults();
	}
}

/* The reference numbers for each of the 10 most popular tags */
var classics        = '7457';
var fantasy         = '11305';
var fiction         = '11743';
var non_fiction     = '21689';
var young_adult     = '33114';
var science_fiction = '26837';
var mystery         = '20939';
var humor           = '15048';

/* The CSV files */
var ratings   = csv.read('ratings.csv');
var book_tags = csv.read('book_tags.csv');
var books     = csv.read('books.csv');
getResults();
